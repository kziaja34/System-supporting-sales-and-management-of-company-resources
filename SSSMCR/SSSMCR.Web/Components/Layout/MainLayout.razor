@inherits LayoutComponentBase
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject IAuthService AuthService
@using SSSMCR.Web.Services
@inject NavigationManager Nav

<MudThemeProvider Theme="_theme" @bind-IsDarkMode="_dark" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       OnClick="@ToggleDrawer"
                       Edge="Edge.Start" />
        
        <MudButton OnClick="@(() => Nav.NavigateTo("/"))"
                   Variant="Variant.Text"
                   Class="inline-flex items-center px-3 py-1 rounded-full cursor-pointer"
                   Style="background-color:transparent; box-shadow:none; transition:background-color 0.2s;"
                   onmouseover="this.style.backgroundColor='rgba(255,255,255,0.05)'"
                   onmouseout="this.style.backgroundColor='transparent'">
            <MudText Class="ml-1" Typo="Typo.h6" Color="Color.Primary">
                SSSMCR
            </MudText>
        </MudButton>
        <MudSpacer />
        <MudIconButton Icon="@(_dark ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                       OnClick="@ToggleDark" />
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen"
               Variant="DrawerVariant.Responsive"
               Elevation="1"
               ClipMode="DrawerClipMode.Never">
        <NavMenu />
    </MudDrawer>

    <MudMainContent>
        <MudContainer Class="pa-4">@Body</MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    bool _dark;

    readonly MudTheme _theme = new()
{
    PaletteDark = new PaletteDark
    {
        Black = "#000000",
        Background = "#121212",           // --clr-surface-a0
        Surface = "#282828",              // --clr-surface-a10 (karty/papers)
        AppbarBackground = "#1A1A1A",     // ciemniejszy pasek, neutralny
        DrawerBackground = "#1B1B1B",     // nieco jaśniejszy od Appbar

        // Akcenty
        Primary = "#F88D05",              // --clr-primary-a0
        Secondary = "#717171",            // neutralny szary (surface-a40)
        Tertiary = "#FFC081",             // --clr-primary-a40/50 (ciepły highlight)

        // Tekst
        TextPrimary = "#F2F2F2",
        TextSecondary = "#BDBDBD",

        // Stany (Semantic)
        Success = "#22946E",              // --clr-success-a0
        Info = "#21498A",                 // --clr-info-a0
        Warning = "#A87A2A",              // --clr-warning-a0
        Error = "#9C2121",                // --clr-danger-a0

        // UI
        ActionDefault = "#D8D8D8",
        ActionDisabled = "#717171",
        ActionDisabledBackground = "#3F3F3F",
        Divider = "#3F3F3F",              // --clr-surface-a20 (widoczny, nienachalny)
        TableLines = "#2A2A2A",

        // Kontrasty na przyciskach/akcentach
        PrimaryContrastText = "#121212",  // ciemny tekst na jasnym akcencie
        SecondaryContrastText = "#121212",
        TertiaryContrastText = "#121212",

        // Czytelność w Appbar/Drawer
        AppbarText = "#F2F2F2",
        DrawerText = "#F2F2F2",
        DrawerIcon = "#BDBDBD",
    },

    PaletteLight = new PaletteLight
    {
        Black = "#000000",
        Background = "#121212",
        Surface = "#282828",
        AppbarBackground = "#271D15",     // --clr-surface-tonal-a0
        DrawerBackground = "#3C322A",     // --clr-surface-tonal-a10

        Primary = "#F88D05",
        Secondary = "#717171",
        Tertiary = "#FFC081",

        TextPrimary = "#F2F2F2",
        TextSecondary = "#BDBDBD",

        Success = "#22946E",
        Info = "#21498A",
        Warning = "#A87A2A",
        Error = "#9C2121",

        ActionDefault = "#D8D8D8",
        ActionDisabled = "#717171",
        ActionDisabledBackground = "#3F3F3F",
        Divider = "#3F3F3F",
        TableLines = "#2A2A2A",

        PrimaryContrastText = "#121212",
        SecondaryContrastText = "#121212",
        TertiaryContrastText = "#121212",

        AppbarText = "#F2F2F2",
        DrawerText = "#F2F2F2",
        DrawerIcon = "#BDBDBD",
    },

    // Delikatna stylistyka komponentów
    LayoutProperties = new LayoutProperties
    {
        DefaultBorderRadius = "8px"
    }
};




    const string DrawerKey = "drawer_open";
    const string DarkKey = "pref_dark";

    async Task ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
        try
        {
            await LocalStorage.SetItemAsync(DrawerKey, _drawerOpen);
        }
        catch
        {
            // ignored
        }
    }

    async Task ToggleDark()
    {
        _dark = !_dark;
        try
        {
            await LocalStorage.SetItemAsync(DarkKey, _dark);
        }
        catch
        {
            // ignored
        }

        StateHasChanged();
    }

    private bool _checked;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        try
        {
            var savedDrawer = await LocalStorage.GetItemAsync<bool?>(DrawerKey);
            if (savedDrawer.HasValue) _drawerOpen = savedDrawer.Value;
            else await LocalStorage.SetItemAsync(DrawerKey, _drawerOpen);
            
            var savedDark = await LocalStorage.GetItemAsync<bool?>(DarkKey);
            if (savedDark.HasValue) _dark = savedDark.Value;
            else await LocalStorage.SetItemAsync(DarkKey, _dark);
        }
        catch
        {
            // ignored
        }

        if (firstRender && !_checked)
        {
            _checked = true;

            var token = await LocalStorage.GetItemAsync<string>("jwt");
            var expires = await LocalStorage.GetItemAsync<DateTime?>("jwt_expires");

            if (string.IsNullOrWhiteSpace(token) || expires is null || expires <= DateTime.UtcNow)
            {
                await AuthService.LogoutAsync();
            }
        }

        StateHasChanged();
    }
}