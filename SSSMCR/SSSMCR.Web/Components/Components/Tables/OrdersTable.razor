@using SSSMCR.Shared.Model
@using SSSMCR.Web.Services
@inject OrdersApiService OrdersService

<MudTextField @bind-Value="_search"
              Placeholder="Search by name or email"
              Adornment="Adornment.Start"
              AdornmentIcon="@Icons.Material.Filled.Search"
              Immediate="true"
              DebounceInterval="300"
              OnDebounceIntervalElapsed="OnSearchChanged"
              Class="mb-3" />

<!-- 🔹 FILTR IMPORTANCE -->
<MudRadioGroup T="string" Value="@ImportanceFilter" ValueChanged="OnPriorityChanged">
    <MudRadio T="string" Value="@("all")" Label="All" />
    <MudRadio T="string" Value="@("low")" Label="Low" />
    <MudRadio T="string" Value="@("medium")" Label="Medium" />
    <MudRadio T="string" Value="@("high")" Label="High" />
</MudRadioGroup>

<MudTable T="OrderListItemDto"
          ServerData="LoadOrders"
          RowsPerPage="10"
          rowsperpageoptions="new int[]{10,25,50}"
          Bordered="true"
          Hover="true"
          Striped="true"
          Breakpoint="Breakpoint.Sm"
          @ref="_table">

    <HeaderContent>
        <MudTh>
            <MudTableSortLabel T="OrderListItemDto" SortLabel="id"
                               InitialDirection="SortDirection.Ascending">
                Id
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="OrderListItemDto" SortLabel="customerEmail"
                               InitialDirection="SortDirection.Ascending">
                Email
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="OrderListItemDto" SortLabel="customerName"
                               InitialDirection="SortDirection.Ascending">
                Customer name
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel T="OrderListItemDto" SortLabel="createdAt"
                               InitialDirection="SortDirection.Descending">
                Created at
            </MudTableSortLabel>
        </MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Importance</MudTh>
        <MudTh>Items</MudTh>
        <MudTh>Total price</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Email">@context.CustomerEmail</MudTd>
        <MudTd DataLabel="Customer name">@context.CustomerName</MudTd>
        <MudTd DataLabel="Created at">@context.CreatedAt.ToString("yyyy-MM-dd HH:mm")</MudTd>

        <MudTd>
            <MudChip T="string"
                     Color="@GetStatusColor(context.Status)"
                     Variant="Variant.Filled"
                     Size="Size.Small"
                     Class="px-2">
                @context.Status
            </MudChip>
        </MudTd>

        <MudTd DataLabel="Importance">
            <MudChip T="string"
                     Color="@GetImportanceColor(context.Importance)"
                     Variant="Variant.Filled"
                     Size="Size.Small"
                     Class="px-2 fw-bold">
                @context.Importance
            </MudChip>
        </MudTd>

        <MudTd DataLabel="Items">@context.ItemsCount</MudTd>
        <MudTd DataLabel="Total price">@context.TotalPrice.ToString("C")</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Search"
                           Color="Color.Primary"
                           Size="Size.Small"
                           Href="@($"/orders/{context.Id}")" />
        </MudTd>
    </RowTemplate>

    <NoRecordsContent>
        <MudText Typo="Typo.body1" Class="pa-4">No records</MudText>
    </NoRecordsContent>

    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private string? _search;
    private string ImportanceFilter { get; set; } = "all";
    private MudTable<OrderListItemDto>? _table;

    private async Task<TableData<OrderListItemDto>> LoadOrders(TableState state, CancellationToken ct)
    {
        var label = string.IsNullOrWhiteSpace(state.SortLabel) ? "id" : state.SortLabel;
        var dir = state.SortDirection == SortDirection.Ascending ? "asc" : "desc";
        var sort = $"{label},{dir}";
        
        string? importance = ImportanceFilter;
        if (string.Equals(importance, "all", StringComparison.OrdinalIgnoreCase))
            importance = null;

        var result = await OrdersService.GetOrdersPageAsync(
            state.Page, state.PageSize, sort, _search, importance);

        return new TableData<OrderListItemDto>
        {
            Items = result.Items,
            TotalItems = result.TotalElements
        };
    }

    private async Task OnSearchChanged(string text)
    {
        _search = text;
        if (_table is not null)
            await _table.ReloadServerData();
        else
            await InvokeAsync(StateHasChanged);
    }

    private async Task OnPriorityChanged(string filter)
    {
        ImportanceFilter = filter;
        if (_table is not null)
            await _table.ReloadServerData();
    }

    private static Color GetStatusColor(string status) => status switch
    {
        "Pending" => Color.Warning,
        "Processing" => Color.Info,
        "Completed" => Color.Success,
        "Cancelled" => Color.Error,
        _ => Color.Default
    };

    private static Color GetImportanceColor(string importance) => importance switch
    {
        "High" => Color.Error,
        "Medium" => Color.Warning,
        _ => Color.Success
    };
}
